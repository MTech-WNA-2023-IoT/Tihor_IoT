
#include <WiFi.h>
#include <PubSubClient.h>

// Wi-Fi credentials
const char* ssid = "BSNL FTTH";
const char* password = "ihatemyself";

// MQTT broker configuration
const char* mqttBroker = "35.200.145.127";//"Raspberry_Pi_IP_Address";
const int mqttPort = 1883;
const char* mqttClientId = "ESP32_Client";
const char* mqttTopic = "sensor/accelerometer";

WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);

float accelerationY;
float accelerationZ;
float accelerationX;

const int xPin = 34; // Pin for X-axis
const int yPin = 35; // Pin for Y-axis
const int zPin = 32; // Pin for Z-axis

const float threshold = 2.0; // Adjust the threshold value as needed

float prevX = 0.0, prevY = 0.0, prevZ = 0.0;

void setup() {
  // Initialization code
  Serial.begin(115200);
  
  // Connect to Wi-Fi
  connectToWiFi();

  // Connect to MQTT broker
  connectToMQTT();
}

void loop() {
  // Read accelerometer values
  float rawX = analogRead(xPin);
  float rawY = analogRead(yPin);
  float rawZ = analogRead(zPin);

  // Convert raw values to meaningful units
  accelerationX = rawToAcceleration(rawX);
  accelerationY = rawToAcceleration(rawY);
  accelerationZ = rawToAcceleration(rawZ);

  // Check for changes in acceleration values
  if (abs(accelerationX - prevX) > threshold || 
      abs(accelerationY - prevY) > threshold || 
      abs(accelerationZ - prevZ) > threshold) {
        Serial.println("---------------------------------------------");
        Serial.println("Vibration detected!");
        Serial.print("X: ");
        Serial.print(accelerationX);
        Serial.print("  Y: ");
        Serial.print(accelerationY);
        Serial.print("  Z: ");
        Serial.println(accelerationZ);
        Serial.println("---------------------------------------------");
         // Read sensor data
        String sensorData = readSensorData();

        // Publish data to MQTT topic
        mqttClient.publish(mqttTopic, String(sensorData).c_str());
        delay(1000); // Adjust delay as needed
  }

  // Update previous values
  prevX = accelerationX;
  prevY = accelerationY;
  prevZ = accelerationZ;

  delay(100); // Adjust delay as needed

  if (!mqttClient.connected()) {
    reconnectMQTT();
  }
  mqttClient.loop();

}

String readSensorData() {
  char data[50]; // Create a temporary char array to hold the concatenated string
  
  // Concatenate the float values with '#' delimiter
  snprintf(data, sizeof(data), "#%.2f#%.2f#%.2f", accelerationX, accelerationY, accelerationZ);
  
  return String(data); // Convert the char array to a String object and return it
}

void connectToWiFi() {
  Serial.println("Connecting to Wi-Fi...");
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to Wi-Fi...");
  }
  Serial.println("---------------------------------------------");
  Serial.println("Connected to Wi-Fi!");
  Serial.println("---------------------------------------------");
}

void connectToMQTT() {
  Serial.println("Connecting to MQTT broker...");
  mqttClient.setServer(mqttBroker, mqttPort);

  while (!mqttClient.connected()) {
    if (mqttClient.connect(mqttClientId)) {
      Serial.println("---------------------------------------------");
      Serial.println("Connected to MQTT broker!");
      Serial.println("---------------------------------------------");
    } else {
      Serial.print("Failed to connect to MQTT broker, retrying...");
      delay(1000);
    }
  }
}

void reconnectMQTT() {
  while (!mqttClient.connected()) {
    if (mqttClient.connect(mqttClientId)) {
      Serial.println("---------------------------------------------");
      Serial.println("Reconnected to MQTT broker!");
      Serial.println("---------------------------------------------");
    } else {
      Serial.print("Failed to reconnect to MQTT broker, retrying...");
      delay(1000);
    }
  }
}


float rawToAcceleration(float rawValue) {
  // Convert raw accelerometer value to meaningful units
  const float scaleFactor = 3.3 / 1023; // Scaling factor for 10-bit ADC resolution (5V / 1023)
  const float zeroGOffset = 1.65;  // Adjust this value based on the zero-g voltage of your accelerometer

  float voltage = (rawValue * scaleFactor) - zeroGOffset;
  float acceleration = voltage * 9.8 / 0.3; // Adjust this value based on the sensitivity of your accelerometer

  return acceleration;
}
